import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.viatra.dse.api.DSEException;
import org.eclipse.viatra.dse.statecode.IStateCoder;
import org.eclipse.viatra.query.runtime.api.IPatternMatch;

import hu.bme.mit.onlab.scquery.ActiveStateMatch;
import sc.stateChart.*;

	public class TestCoder implements IStateCoder {
	
	private org.eclipse.emf.ecore.impl.EClassImpl@b01cb8d (name: StateMachine) (instanceClassName: null) (abstract: false, interface: false) model;
	private ViatraQueryEngine engine;


	@Override
	public void init(Notifier notifier) {
		model = (org.eclipse.emf.ecore.impl.EClassImpl@b01cb8d (name: StateMachine) (instanceClassName: null) (abstract: false, interface: false)) notifier;
		engine = getQueryEngine();
	}

	@Override
	public Object createStateCode() {
		StringBuilder sb = new StringBuilder();
		StringBuilder temp = new StringBuilder();
		////
		ArrayList<String> Statecodes = new ArrayList<String>();
		StateMatcher stateMatcher = StateMatcher.on(engine); 
		for(State object : stateMatcher.getAllMatches()) {
			temp = "";
			temp.append(object.getisActive());
			temp.append('-');
			temp.deleteCharAt(temp.length()-1);
			Statecodes.add(temp);
		}
		Collections.sort(Statecodes);

		for (String s : Statecodes){
			sb.append(s);
			sb.append(';');
		}
		return sb.toString();
	}

	@Override
	public Object createActivationCode(IPatternMatch match) {
		if (match instanceof ActiveStateMatch){
			ActiveStateMatch asm = (ActiveStateMatch) match;
			return asm.getTransient().getName();
		} else
			throw new DSEException ("Unsupported rule.");
	}
	
	private ViatraQueryEngine getQueryEngine () throws ViatraQueryException{
			ViatraQueryEngine engine = ViatraQueryEngine.on(new EMFScope(model.eResource()));
			return engine;
		}
		
	private ArrayList<String> sort(ArrayList<String> array){
		Collections.sort(array, new Comparator<String>() {
							    public int compare(String str1, String str2) {
							        int res = String.CASE_INSENSITIVE_ORDER.compare(str1, str2);
							        if (res == 0) {
							            res = str1.compareTo(str2);
							        }
							        return res;
							    }});
		}
}
