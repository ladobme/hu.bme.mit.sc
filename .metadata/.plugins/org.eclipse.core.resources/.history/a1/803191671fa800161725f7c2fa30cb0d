package hu.bme.mit.onlab.scdse

import org.eclipse.emf.ecore.EClass
import java.util.ArrayList

class StateChartCoderGenerator {
	char separator=';';
	boolean sort=true;
	String nameOfActivationMatch;
	EClass rootElement;
	String rootName = "";
	String rootPackage = "";
	ArrayList <ElementContainer> elements;
	
	def public void listAllState(boolean listAll){
		listAllState=listAll;
	}
	
	def public void setSeparator(char c){
		separator=c;
	}
	
	def public void setSort(boolean s){
		sort=s;
	}
	
	def public void setUsedActivationMatch(String match){
		nameOfActivationMatch = match;
	}
	
	def public void setRootElementName(EClass root){
		rootElement = root;
		rootName = root.getName();
	}
	
	def public void setPackage(String setpackage){
		rootPackage = setpackage;
	}
	
	def public void addElement(ElementContainer ec){
		elements.add(ec);
	}
	
	def public String createCoder(String name){
		'''
		import java.util.ArrayList;
		import java.util.Collections;
		import java.util.Comparator;
		
		import org.eclipse.emf.common.notify.Notifier;
		import org.eclipse.viatra.dse.api.DSEException;
		import org.eclipse.viatra.dse.statecode.IStateCoder;
		import org.eclipse.viatra.query.runtime.api.IPatternMatch;
		
		import hu.bme.mit.onlab.scquery.ActiveStateMatch;
		import «rootPackage».*;
		
			public class «name» implements IStateCoder {
			
			private «rootElement» model;
			
			«FOR element: elements»
				«IF element.modelElement()»
				private ArrayList <«element.getName()»> «element.getName().toFirstLower()»s;
				«ENDIF»
			«ENDFOR»
			ViatraQueryEngine engine;
		//	private ArrayList<ElementContainer> elements = new ArrayList<ElementContainer>()

			@Override
			public void init(Notifier notifier) {
				model = («rootElement») notifier;
				«FOR element: elements»
					«IF element.modelElement()»
						«element.getName().toFirstLower()»s = new ArrayList<«element.getName()»>();
					«ENDIF»
				«ENDFOR»
				try {
					engine = getQueryEngine();
					 «FOR element: elements»
					 	«IF element.modelElement()»
					 		«element.getQueryName()»Matcher «element.getQueryName().toFirstLower()»matcher = «element.getQueryName()»Matcher.on(engine);
					 		Collection<«element.getQueryName()»Match> «element.getQueryName().toFirstLower()»matches = «element.getQueryName().toFirstLower()»matcher.getAllMatches();
					 		for («element.getQueryName()»Match m : «element.getQueryName().toFirstLower()»matches){
					 			«element.getName().toFirstLower()»s.add(m.get«element.getName()»());
					 		}
					 		Collections.sort(«element.getName().toFirstLower()»s, «element.getComparatorAsString()»);
					 	«ENDIF»
					 «ENDFOR»
				} catch (ViatraQueryException e){
					e.printStackTrace();
				}
			}
		
			@Override
			public Object createStateCode() {
				StringBuilder sb = new StringBuilder();
				«FOR element: elements»
					«IF element.modelElement()»
					for («element.getName()» e : «element.getName().toFirstLower()»s){
						e.getName();
					}
					«ELSE»
						;
					«ENDIF»
				«ENDFOR»
				sb.append("Active states: ");
				for (State state : states){
					if (state.isIsActive()){
						sb.append(state.getName());
						sb.append('«separator»');
					}
				}
				return sb.toString();
			}
		
			@Override
			public Object createActivationCode(IPatternMatch match) {
				if (match instanceof «nameOfActivationMatch»){
					«nameOfActivationMatch» asm = («nameOfActivationMatch») match;
					return asm.getTransient().getName();
				} else
					throw new DSEException ("Unsupported rule.");
			}
			
			private ViatraQueryEngine getQueryEngine () throws ViatraQueryException{
					ViatraQueryEngine engine = ViatraQueryEngine.on(new EMFScope(model.eResource()));
					return engine;
				}
		}
		'''
	}
}