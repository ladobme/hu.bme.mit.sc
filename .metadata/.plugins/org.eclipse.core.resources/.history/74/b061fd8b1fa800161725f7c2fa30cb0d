package hu.bme.mit.onlab.scdse

import org.eclipse.emf.ecore.EClass
import java.util.ArrayList
import org.eclipse.emf.ecore.EAttribute
import java.util.List

class StateChartCoderGenerator {
	char separator=';';
	boolean sort=true;
	String nameOfActivationMatch;
	EClass rootElement;
	String rootName = "";
	String rootPackage = "";
	ArrayList <ElementContainer> elements;
	
	def public void listAllState(boolean listAll){
		listAllState=listAll;
	}
	
	def public void setSeparator(char c){
		separator=c;
	}
	
	def public void setSort(boolean s){
		sort=s;
	}
	
	def public void setUsedActivationMatch(String match){
		nameOfActivationMatch = match;
	}
	
	def public void setRootElementName(EClass root){
		rootElement = root;
		rootName = root.getName();
	}
	
	def public void setPackage(String setpackage){
		rootPackage = setpackage;
	}
	
	def public void addElement(ElementContainer ec){
		elements.add(ec);
	}
	
	
	///
	public static class StateCodeElement {
		EClass clazz;
		List<EAttribute> attributes;
		String queryName;
		def getClassName() {
			clazz.name
		}
	}
	List<StateCodeElement> stateCodeElements;
	///
	
	
	def public String createCoder(String name){
		'''
		import java.util.ArrayList;
		import java.util.Collections;
		import java.util.Comparator;
		
		import org.eclipse.emf.common.notify.Notifier;
		import org.eclipse.viatra.dse.api.DSEException;
		import org.eclipse.viatra.dse.statecode.IStateCoder;
		import org.eclipse.viatra.query.runtime.api.IPatternMatch;
		
		import hu.bme.mit.onlab.scquery.ActiveStateMatch;
		import «rootPackage».*;
		
			public class «name» implements IStateCoder {
			
			private «rootElement» model;
			private ViatraQueryEngine engine;
			private StateCoderManager manager;


			@Override
			public void init(Notifier notifier) {
				model = («rootElement») notifier;
				engine = getQueryEngine();
				manager = StateCoderManager.getInstance();
			}
		
			@Override
			public Object createStateCode() {
				StringBuilder sb = new StringBuilder();
				
				////
				«FOR element : stateCodeElements»
					ArrayList<String> «element.className»codes = new ArrayList<String>();
					// matcher = ...
					for(«element.className» object : matcher.getAllMatches()) {
						
					}
					//sort
				«ENDFOR»
				////
				
				for (ElementContainer ec : manager.getElements()){
					switch (ec.getType()){
						case ELEMENT:
							for (String s : ec.getMatches(engine)){
								sb.append(s);
								sb.append('«separator»');
							}
							break;
						case STRING:
							sb.append(ec.getCodeText());
							sb.append('«separator»');
							break;
					}
				}
				return sb.toString();
			}
		
			@Override
			public Object createActivationCode(IPatternMatch match) {
				if (match instanceof «nameOfActivationMatch»){
					«nameOfActivationMatch» asm = («nameOfActivationMatch») match;
					return asm.getTransient().getName();
				} else
					throw new DSEException ("Unsupported rule.");
			}
			
			private ViatraQueryEngine getQueryEngine () throws ViatraQueryException{
					ViatraQueryEngine engine = ViatraQueryEngine.on(new EMFScope(model.eResource()));
					return engine;
				}
		}
		'''
	}
}